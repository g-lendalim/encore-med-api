datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum Role {
  PATIENT
  STAFF
  ADMIN
}

enum AppointmentStatus {
  PENDING
  CONFIRMED
  CANCELLED
  COMPLETED
}

enum Sex {
  MALE
  FEMALE
}

model Hospital {
  id        String   @id @default(cuid())
  name      String  
  timezone  String
  smtpId    String?  @unique
  smtp      Smtp?    @relation("HospitalSmtp", fields: [smtpId], references: [id])
  adminId   String   @unique
  admin     User     @relation("HospitalAdmin", fields: [adminId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  staff        Staff[]
  doctors      Doctor[]
  patients     Patient[]
  appointments Appointment[]

  @@index([name])
}

model Smtp {
  id        String    @id @default(cuid())
  host      String
  port      Int
  secure    Boolean
  username  String
  password  String
  fromEmail String
  hospital  Hospital? @relation("HospitalSmtp")
  createdAt DateTime  @default(now())
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  name      String
  dob       DateTime
  sex       Sex
  role      Role     @default(PATIENT)
  hospitalAdmin Hospital?   @relation("HospitalAdmin")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  patient       Patient?
  staff         Staff[]
  refreshTokens RefreshToken[]
}

model Staff {
  id         String   @id @default(cuid())
  hospital   Hospital @relation(fields: [hospitalId], references: [id])
  hospitalId String
  user       User     @relation(fields: [userId], references: [id])
  userId     String   @unique
  role       Role     @default(STAFF)
  position   String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@index([hospitalId])
}

model Patient {
  id           String   @id @default(cuid())
  user         User     @relation(fields: [userId], references: [id])
  userId       String   @unique
  hospital     Hospital @relation(fields: [hospitalId], references: [id])
  hospitalId   String
  allergies    String
  underlyingDiseases String[]
  medications       String[]
  diagnosis    String?
  notes        String?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  appointments Appointment[]

  @@index([hospitalId])
}

model Doctor {
  id           String   @id @default(cuid())
  hospital     Hospital @relation(fields: [hospitalId], references: [id])
  hospitalId   String
  name         String
  specialty    String?
  bio          String?
  slotDuration Int      @default(30)
  createdAt    DateTime @default(now())

  workingHours WorkingHours[]
  appointments Appointment[]

  @@index([hospitalId])
}

model WorkingHours {
  id        String   @id @default(cuid())
  doctor    Doctor   @relation(fields: [doctorId], references: [id])
  doctorId  String
  dayOfWeek Int
  startTime String
  endTime   String
  createdAt DateTime @default(now())

  @@index([doctorId, dayOfWeek])
}

model Appointment {
  id         String            @id @default(cuid())
  hospital   Hospital          @relation(fields: [hospitalId], references: [id])
  hospitalId String
  doctor     Doctor            @relation(fields: [doctorId], references: [id])
  doctorId   String
  patient    Patient           @relation(fields: [patientId], references: [id])
  patientId  String
  startAt    DateTime
  endAt      DateTime
  status     AppointmentStatus @default(PENDING)
  createdAt  DateTime          @default(now())

  @@index([hospitalId, startAt])
  @@index([doctorId, startAt])
}

model RefreshToken {
  id        String   @id @default(cuid())
  tokenHash String
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  expiresAt DateTime
  createdAt DateTime @default(now())
}
